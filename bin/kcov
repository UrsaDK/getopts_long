#!/usr/bin/env bash

set -e

: "${LIB_DIR:="./lib"}"
: "${TEST_DIR:="./test"}"
: "${COVERAGE_DIR:="./coverage"}"

__exit() {
  echo "${0}: ${1:?Missing required parameter -- error message}" >&2
  exit "${2:-1}"
}

path_exists() {
  : "${1:?Missing required argument -- directory path}"
  [[ -e "${1}" ]] || __exit "Path not found -- ${1}"
}

color_diff() {
  : "${1:?Missing required argument -- label color}"
  : "${2:?Missing required argument -- coverage diff}"
  : "${3:?Missing required argument -- version sha}"
  printf "\e[01;%sm%+.2f%%\e[00m compared to %s" "${1}" "${2}" "${3}"
}

print_coverage_diff() {
  : "${1:?Missing required argument -- new code coverage}"

  local sha coverage diff
  sha="$(head -c7 /home/VERSION)"
  coverage="$(jq -r .percent_covered "/home/coverage/coverage.json")"
  diff=$(echo "${coverage} - ${1}" | bc -l)

  if tty -s && [[ "${diff}" -gt '0' ]]; then color_diff 32 "${diff}" "${sha}"
  elif tty -s && [[ "${diff}" -lt '0' ]]; then color_diff 31 "${diff}" "${sha}"
  elif [[ "${diff}" == '0' ]]; then printf "unchanged compared to %s" "${sha}"
  else printf "%+.2f%% compared to %s" "${diff}" "${sha}"; fi
}

path_exists "${LIB_DIR}"
path_exists "${TEST_DIR}"

# Setup exit trap
TEMP_DIR="$(mktemp -d -t kcov.XXXXXXXXX)"
trap 'rm -Rf ${TEMP_DIR}' EXIT

# Run kcov
echo "Generating coverage report: ${COVERAGE_DIR}/index.html"
/usr/local/bin/kcov --clean --include-path="${LIB_DIR}" \
  "${TEMP_DIR}" \
  /usr/local/bin/bats --recursive "${TEST_DIR}"

# Clean up kcov report
rm "${TEMP_DIR}"/bats/{bcov.css,amber.png,glass.png}
sed -i 's#"../data/bcov.css"#"data/bcov.css"#g' "${TEMP_DIR}"/bats/*.html
sed -i -E 's#/(home|mnt)/##g' \
  "${TEMP_DIR}"/bats/*.{json,xml} "${TEMP_DIR}"/bats/metadata/*




echo "$(id -un):$(id -gn)"
pwd
ls -la
touch monkey.txt
ls -l monkey.txt
exit




# Present kcov report
rm -Rf "${COVERAGE_DIR}"
cp -LR "${TEMP_DIR}/bats" "${COVERAGE_DIR}"

# Total code coverage
COVERAGE="$(jq -r .percent_covered "${COVERAGE_DIR}/coverage.json")"
printf "Code covered: %s%% " "${COVERAGE}"

# Code coverage diff
if [[ -e "/.dockerenv" && "${PWD}" != "/home" ]]; then
  printf "(%s)" "$(print_coverage_diff "${COVERAGE}")"
fi

# Finish code coverage stats with a new line
echo
