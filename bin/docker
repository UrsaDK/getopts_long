#!/usr/bin/env bash

__help() {
cat <<END_OF_HELP
Usage: ${0} <commands> [options]                  <> - required parameters
Where commands are:                               [] - optional parameters

  build [image:]<tag> [docker-build-options]
            Builds a new container image using 'docker image build' command.
            See 'docker image build --help' for a list of supported options.

  run [image:]<tag> [shell-command-and-options]
            Run a command in a new container with 'docker container run'.
            Container-run options are preconfigured, user input is executed.

  attach [image:]<tag> [docker-attach-options]
            Attaches input/output streams to an already running container.
            See 'docker container attach --help' for all supported options.

  exec [image:]<tag> [shell-command-and-options]
            Executes a command in a container which launched from the image.
            See 'docker container exec --help' for more information.

  stop [image:]<tag> [docker-stop-options]
            Stops all running containers based on the application's image.
            See 'docker container stop --help' for more information.

END_OF_HELP
}

COMMAND="${1:-help}"
if [[ -z "${2}" || "${2}" == '-'* ]]; then
  IMAGE="$(echo "${PWD##*/}" | tr '[:upper:] ' '[:lower:]-')"
  TAG="latest"
  shift 1
elif [[ "${2}" == *':'* ]]; then
  IMAGE="${2}"
  TAG="${2##*:}"
  shift 2
elif [[ "${2}" == *'/'* ]]; then
  IMAGE="${2}"
  TAG="latest"
  shift 2
elif [[ -n "${2}" ]]; then
  IMAGE="$(echo "${PWD##*/}" | tr '[:upper:] ' '[:lower:]-'):${2}"
  TAG="${2}"
  shift 2
else
  echo "Invalid argument -- ${2}" >&2
  echo "  - IMAGE: ${IMAGE}" >&2
  echo "  - TAG:   ${TAG}" >&2
  exit 1
fi

case "${COMMAND}" in
  'b'|'build')
    DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} \
      docker image build --tag "${IMAGE}" --target "${TAG}" \
      --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%TZ")" \
      --build-arg BUILD_SHA="$(git rev-parse HEAD)" \
      "${@}" "${PWD}";
    ;;
  'r'|'run')
    [[ -t 1 ]] && IT='-it' # Check if output is attached to a TTY
    # shellcheck disable=SC2086
    docker container run ${GITHUB_ACTIONS:+-u root} \
      --rm --init ${IT} -v "${PWD}:/mnt" "${IMAGE}" "${@}"
    ;;
  'a'|'attach')
    CONTAINER_ID="$(docker container ls -qlf "ancestor=${IMAGE}")"
    docker container attach "${@}" "${CONTAINER_ID}"
    ;;
  'e'|'exec')
    [[ -t 1 ]] && IT='-it' # Check if output is attached to a TTY
    CONTAINER_ID="$(docker container ls -qlf "ancestor=${IMAGE}")"
    #shellcheck disable=SC2086
    docker container exec ${IT} "${CONTAINER_ID}" "${@}"
    ;;
  's'|'stop')
    CONTAINER_IDS="$(docker container ls -qf "ancestor=${IMAGE}")"
    [[ -n "${CONTAINER_IDS}" ]] && docker container stop "${@}" "${CONTAINER_IDS}"
    ;;
  '-?'|'--help'|'help')
    __help
    exit
    ;;
  *)
    echo "${0}: Unknown command -- ${DOCKER_CMD}" >&2
    exit 1
    ;;
esac
