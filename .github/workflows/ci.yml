name: CI pipeline

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]

defaults:
  run:
    shell: bash

env:
  BUILD_CACHE: /home/runner/.docker/buildkit

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ${{ env.BUILD_CACHE }}
          key: ${{ hashFiles('Dockerfile') }}

      - name: Start buildkit daemon
        run: |
          BUILDKIT_URL="$(curl -sL https://api.github.com/repos/moby/buildkit/releases \
            | jq -r 'map(select(.name|startswith("v")))|sort_by(.name)[-1].assets[]|select(.name|endswith(".linux-amd64.tar.gz")).browser_download_url')"
          curl -L "${BUILDKIT_URL}" | sudo tar -xz -C /usr/local

          sudo --non-interactive --shell <<END_SUDO
            install -d -m 0750 -o root -g docker /run/buildkit
            buildkitd &
            while ! test -S /run/buildkit/buildkitd.sock; do sleep 0.1; done
            chgrp docker /run/buildkit/buildkitd.sock
          END_SUDO

      - name: Build docker image
        run: |
          DEFAULT_BRANCH="$(curl -sL https://api.github.com/repos/${GITHUB_REPOSITORY} \
            | jq -r '.default_branch' )"
          case "${GITHUB_REF}" in
            "refs/heads/${DEFAULT_BRANCH}")       # eg: refs/heads/master
              DOCKER_IMAGE="${GITHUB_REPOSITORY,,}:latest"
              ;;
            "refs/heads/"*)                       # eg: refs/heads/my/branch
              DOCKER_IMAGE="${GITHUB_REF#refs/heads/}"
              DOCKER_IMAGE="${GITHUB_REPOSITORY,,}:${DOCKER_IMAGE//\//-}"
              ;;
            "refs/pull/"*)                        # eg: refs/pull/2/merge
              DOCKER_IMAGE="pr-${GITHUB_REF#refs/pull/}"
              DOCKER_IMAGE="${GITHUB_REPOSITORY,,}:${DOCKER_IMAGE%/merge}"
              ;;
            "refs/tags/"*)                        # eg: refs/tags/v1.0.0
              DOCKER_IMAGE="${GITHUB_REPOSITORY,,}:${GITHUB_REF#refs/tags/}"
              ;;
            *)
              echo "Failed to process GITHUB_REF -- ${GITHUB_REF}" >&2
              exit 1
              ;;
          esac
          echo "::set-env name=DOCKER_IMAGE::${DOCKER_IMAGE}"

          buildctl build \
            --frontend=dockerfile.v0 --local dockerfile=. --local context=. \
            --export-cache type=local,dest=${BUILD_CACHE},mode=max \
            --import-cache type=local,src=${BUILD_CACHE} \
            --output type=docker,name=${DOCKER_IMAGE} | docker load
          echo "Cache size: $(du -sh ${BUILD_CACHE})"

      - name: Prepare coverage report
        run: ./bin/docker run ${DOCKER_IMAGE} cp -a /home/coverage /mnt/coverage

      - uses: codecov/codecov-action@v1

      - name: Publish docker image
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN }} \
            | docker login -u ${GITHUB_ACTOR,,} --password-stdin
          docker push ${DOCKER_IMAGE}
